const axios = require('axios');

// Configuraci√≥n de la API
const API_BASE_URL = 'http://localhost:3000/api';
const ADMIN_TOKEN = 'tu_token_admin_aqui'; // Reemplazar con un token v√°lido

async function testEliminarCotizacion() {
  try {
    console.log('üß™ Probando funcionalidad de eliminar cotizaciones...\n');

    // 1. Primero obtener todas las cotizaciones para ver cu√°les existen
    console.log('1. Obteniendo lista de cotizaciones...');
    const cotizacionesResponse = await axios.get(`${API_BASE_URL}/cotizaciones`, {
      headers: {
        'Authorization': `Bearer ${ADMIN_TOKEN}`
      }
    });
    
    if (!cotizacionesResponse.data.success) {
      console.log('‚ùå Error obteniendo cotizaciones');
      return;
    }

    const cotizaciones = cotizacionesResponse.data.data.cotizaciones;
    console.log(`‚úÖ Se encontraron ${cotizaciones.length} cotizaciones`);

    if (cotizaciones.length === 0) {
      console.log('‚ö†Ô∏è No hay cotizaciones para eliminar. Creando una cotizaci√≥n de prueba...');
      
      // Crear una cotizaci√≥n de prueba
      const cotizacionPrueba = {
        nombre: 'Cliente Prueba',
        apellidos: 'Para Eliminar',
        edad: 30,
        telefono: '+56912345678',
        email: 'prueba@eliminar.com',
        isapre: 'Banm√©dica',
        valor_mensual: 50000,
        clinica: 'Cl√≠nica Alemana',
        renta: 1500000,
        numero_cargas: 2,
        edades_cargas: '5, 8',
        mensaje: 'Cotizaci√≥n de prueba para eliminar',
        procedencia: 'Test'
      };

      const crearResponse = await axios.post(`${API_BASE_URL}/cotizaciones/admin`, cotizacionPrueba, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });

      if (crearResponse.data.success) {
        console.log('‚úÖ Cotizaci√≥n de prueba creada con ID:', crearResponse.data.data.id);
        const cotizacionId = crearResponse.data.data.id;
        
        // Continuar con la eliminaci√≥n
        await testEliminacion(cotizacionId);
      } else {
        console.log('‚ùå Error creando cotizaci√≥n de prueba');
      }
    } else {
      // Usar la primera cotizaci√≥n para la prueba
      const cotizacionId = cotizaciones[0].id;
      console.log(`üìù Usando cotizaci√≥n ID: ${cotizacionId} para la prueba`);
      
      await testEliminacion(cotizacionId);
    }

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.response?.data || error.message);
  }
}

async function testEliminacion(cotizacionId) {
  try {
    // 2. Verificar que la cotizaci√≥n existe antes de eliminar
    console.log(`\n2. Verificando que la cotizaci√≥n ${cotizacionId} existe...`);
    const verificarResponse = await axios.get(`${API_BASE_URL}/cotizaciones/${cotizacionId}`, {
      headers: {
        'Authorization': `Bearer ${ADMIN_TOKEN}`
      }
    });
    
    if (verificarResponse.data.success) {
      console.log('‚úÖ Cotizaci√≥n encontrada:', verificarResponse.data.data.nombre);
    } else {
      console.log('‚ùå Cotizaci√≥n no encontrada');
      return;
    }

    // 3. Eliminar la cotizaci√≥n
    console.log(`\n3. Eliminando cotizaci√≥n ${cotizacionId}...`);
    const eliminarResponse = await axios.delete(`${API_BASE_URL}/cotizaciones/${cotizacionId}`, {
      headers: {
        'Authorization': `Bearer ${ADMIN_TOKEN}`
      }
    });
    
    if (eliminarResponse.data.success) {
      console.log('‚úÖ Cotizaci√≥n eliminada exitosamente');
      console.log('üìù Datos de la cotizaci√≥n eliminada:', eliminarResponse.data.data);
    } else {
      console.log('‚ùå Error eliminando cotizaci√≥n');
      return;
    }

    // 4. Verificar que la cotizaci√≥n ya no existe
    console.log(`\n4. Verificando que la cotizaci√≥n ${cotizacionId} ya no existe...`);
    try {
      await axios.get(`${API_BASE_URL}/cotizaciones/${cotizacionId}`, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`
        }
      });
      console.log('‚ùå Error: La cotizaci√≥n a√∫n existe despu√©s de eliminarla');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Confirmado: La cotizaci√≥n ya no existe');
      } else {
        console.log('‚ùå Error inesperado verificando eliminaci√≥n:', error.response?.data || error.message);
      }
    }

    // 5. Intentar eliminar una cotizaci√≥n que no existe
    console.log('\n5. Probando eliminar una cotizaci√≥n inexistente...');
    try {
      await axios.delete(`${API_BASE_URL}/cotizaciones/999999`, {
        headers: {
          'Authorization': `Bearer ${ADMIN_TOKEN}`
        }
      });
      console.log('‚ùå Error: Se elimin√≥ una cotizaci√≥n inexistente');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Correcto: No se puede eliminar una cotizaci√≥n inexistente');
      } else {
        console.log('‚ùå Error inesperado:', error.response?.data || error.message);
      }
    }

    console.log('\nüéâ Pruebas de eliminaci√≥n de cotizaciones completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error en la prueba de eliminaci√≥n:', error.response?.data || error.message);
  }
}

// Funci√≥n para probar sin autenticaci√≥n
async function testSinAutenticacion() {
  try {
    console.log('\nüîí Probando acceso sin autenticaci√≥n...');
    
    try {
      await axios.delete(`${API_BASE_URL}/cotizaciones/1`);
      console.log('‚ùå Error: Se elimin√≥ una cotizaci√≥n sin autenticaci√≥n');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Correcto: Se requiere autenticaci√≥n para eliminar cotizaciones');
      } else {
        console.log('‚ùå Error inesperado:', error.response?.data || error.message);
      }
    }

  } catch (error) {
    console.error('‚ùå Error en prueba sin autenticaci√≥n:', error.response?.data || error.message);
  }
}

// Ejecutar pruebas
async function ejecutarPruebas() {
  console.log('üöÄ Iniciando pruebas de eliminaci√≥n de cotizaciones...\n');
  
  await testEliminarCotizacion();
  await testSinAutenticacion();
  
  console.log('\n‚ú® Todas las pruebas completadas!');
}

// Ejecutar si se llama directamente
if (require.main === module) {
  ejecutarPruebas().catch(console.error);
}

module.exports = { testEliminarCotizacion, testSinAutenticacion };
