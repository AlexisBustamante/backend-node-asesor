/**
 * Script de migraci√≥n para agregar soporte multi-tenant
 * Agrega el campo id_propietario a las tablas cotizacion y comentarios
 */

const { query } = require('../config/database');

const migrateMultiTenant = async () => {
  try {
    console.log('üöÄ Iniciando migraci√≥n multi-tenant...');

    // 1. Agregar id_propietario a la tabla cotizacion
    console.log('üìù Agregando id_propietario a tabla cotizacion...');
    await query(`
      ALTER TABLE cotizacion 
      ADD COLUMN IF NOT EXISTS id_propietario INTEGER NOT NULL DEFAULT 1
    `);
    console.log('‚úÖ Campo id_propietario agregado a cotizacion');

    // 2. Agregar id_propietario a la tabla comentarios
    console.log('üìù Agregando id_propietario a tabla comentarios...');
    await query(`
      ALTER TABLE comentarios 
      ADD COLUMN IF NOT EXISTS id_propietario INTEGER NOT NULL DEFAULT 1
    `);
    console.log('‚úÖ Campo id_propietario agregado a comentarios');

    // 3. Crear √≠ndices para optimizar consultas por propietario
    console.log('üîç Creando √≠ndices para optimizaci√≥n...');
    
    await query(`CREATE INDEX IF NOT EXISTS idx_cotizacion_propietario ON cotizacion(id_propietario);`);
    await query(`CREATE INDEX IF NOT EXISTS idx_comentarios_propietario ON comentarios(id_propietario);`);
    
    // √çndices compuestos para consultas frecuentes
    await query(`CREATE INDEX IF NOT EXISTS idx_cotizacion_propietario_fecha ON cotizacion(id_propietario, fecha_envio);`);
    await query(`CREATE INDEX IF NOT EXISTS idx_comentarios_propietario_ver ON comentarios(id_propietario, ver);`);
    
    console.log('‚úÖ √çndices creados exitosamente');

    // 4. Actualizar registros existentes (asignar propietario por defecto)
    console.log('üîÑ Actualizando registros existentes...');
    
    const cotizacionesResult = await query(`
      UPDATE cotizacion 
      SET id_propietario = 1 
      WHERE id_propietario IS NULL OR id_propietario = 0
    `);
    console.log(`‚úÖ ${cotizacionesResult.rowCount} cotizaciones actualizadas`);

    const comentariosResult = await query(`
      UPDATE comentarios 
      SET id_propietario = 1 
      WHERE id_propietario IS NULL OR id_propietario = 0
    `);
    console.log(`‚úÖ ${comentariosResult.rowCount} comentarios actualizados`);

    // 5. Verificar la migraci√≥n
    console.log('üîç Verificando migraci√≥n...');
    
    const cotizacionesCount = await query(`
      SELECT COUNT(*) as total FROM cotizacion WHERE id_propietario IS NOT NULL
    `);
    console.log(`üìä Total cotizaciones con propietario: ${cotizacionesCount.rows[0].total}`);

    const comentariosCount = await query(`
      SELECT COUNT(*) as total FROM comentarios WHERE id_propietario IS NOT NULL
    `);
    console.log(`üìä Total comentarios con propietario: ${comentariosCount.rows[0].total}`);

    console.log('üéâ Migraci√≥n multi-tenant completada exitosamente!');
    console.log('');
    console.log('üìã Resumen de cambios:');
    console.log('   ‚úÖ Campo id_propietario agregado a tabla cotizacion');
    console.log('   ‚úÖ Campo id_propietario agregado a tabla comentarios');
    console.log('   ‚úÖ √çndices de optimizaci√≥n creados');
    console.log('   ‚úÖ Registros existentes actualizados');
    console.log('');
    console.log('üöÄ El sistema ahora soporta m√∫ltiples p√°ginas web!');

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    throw error;
  }
};

// Ejecutar migraci√≥n si se llama directamente
if (require.main === module) {
  migrateMultiTenant()
    .then(() => {
      console.log('‚úÖ Migraci√≥n completada');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en migraci√≥n:', error);
      process.exit(1);
    });
}

module.exports = { migrateMultiTenant };
